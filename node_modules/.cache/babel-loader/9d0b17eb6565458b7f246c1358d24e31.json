{"ast":null,"code":"var _jsxFileName = \"/home/alihz/Desktop/react/my-app2/src/componets/toolbar/Toolbar.jsx\";\nimport React, { useState } from \"react\";\nimport \"./toolbar.css\";\nimport ToolbarData from \"./toolbar.json\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Tabs, Tab, TabList, TabPanel } from \"react-tabs\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper\n  }\n}));\n\nconst ToolBar = props => {\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n  const [key, setkey] = useState(0);\n\n  const handleChange = id => {\n    setValue(id);\n  };\n\n  const handleActive = id => {\n    setkey(id);\n  };\n\n  const CustomTabPanel = ({\n    children,\n    myCustomProp,\n    ...otherProps\n  }) => /*#__PURE__*/React.createElement(TabPanel, Object.assign({}, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }\n  }, children), myCustomProp && `myCustomProp: ${myCustomProp}`);\n\n  CustomTabPanel.tabsRole = 'TabPanel';\n  const url = window.location.href.split(\"/\").pop();\n  const vals = Object.keys(ToolbarData);\n\n  for (var i = 0; i < vals.length; i++) {\n    if (vals[i] === url) {\n      const list = vals[i];\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, Object.values(ToolbarData[list]).map(item => /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tabs, {\n        value: value,\n        activeKey: key,\n        onSelect: handleActive(item.id),\n        onActiveTab: () => props.setActiveTab(el.id),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(TabList, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Tab, {\n        className: item.class,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 19\n        }\n      }, item.name))), /*#__PURE__*/React.createElement(CustomTabPanel, {\n        value: value,\n        index: item.id,\n        children: item.name,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }\n};\n\nexport default ToolBar;","map":{"version":3,"sources":["/home/alihz/Desktop/react/my-app2/src/componets/toolbar/Toolbar.jsx"],"names":["React","useState","ToolbarData","makeStyles","Tabs","Tab","TabList","TabPanel","useStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","ToolBar","props","classes","value","setValue","key","setkey","handleChange","id","handleActive","CustomTabPanel","children","myCustomProp","otherProps","tabsRole","url","window","location","href","split","pop","vals","Object","keys","i","length","list","values","map","item","setActiveTab","el","class","name"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"./toolbar.css\";\nimport ToolbarData from \"./toolbar.json\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {Tabs,Tab,TabList,TabPanel} from \"react-tabs\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nconst ToolBar = (props) => {\n  const classes = useStyles();\n  const [value, setValue] = useState(0);\n  const [key,setkey] =useState(0)\n\n  const handleChange = (id) => {\n    setValue(id);\n  };\n  const handleActive = (id) => {\n    setkey(id);\n  };\n  \n  const CustomTabPanel = ({ children, myCustomProp, ...otherProps }) => (\n    <TabPanel {...otherProps}>\n      <p>{children}</p>\n      {myCustomProp && `myCustomProp: ${myCustomProp}`}\n    </TabPanel>\n  )\n   \n  CustomTabPanel.tabsRole = 'TabPanel'\n  const url = window.location.href.split(\"/\").pop();\n  const vals = Object.keys(ToolbarData);\n  for (var i = 0; i < vals.length; i++) {\n    if (vals[i] === url) {\n      const list = vals[i];\n      return (\n        <div className=\"toolbar\">\n          {Object.values(ToolbarData[list]).map((item) => (\n            <div className={classes.root}>\n              <Tabs\n                value={value}\n                activeKey={key}\n                onSelect={handleActive(item.id)}\n                onActiveTab={() => props.setActiveTab(el.id)}\n              >\n                <TabList>\n                  <Tab className={item.class}>{item.name}</Tab>\n                </TabList>\n              </Tabs>\n              <CustomTabPanel value={value} index={item.id} children={item.name} />\n            </div>\n          ))}\n        </div>\n      );\n    }\n  }\n};\nexport default ToolBar;\n"]},"metadata":{},"sourceType":"module"}